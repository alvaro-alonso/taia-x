version: '3.4'

services:

  sandbox:
    image: oxheadalpha/flextesa:20211221
    container_name: taia-x-sandbox
    environment:
      block_time: 3
      flextesa_node_cors_origin: "*"
    command: "hangzbox start"
    ports:
      - 20000:20000

  db:
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - 5432:5432

  # to build a ipfs cluster: https://github.com/ipfs/ipfs-cluster/blob/master/docker-compose.yml
  ipfs:
    image: ipfs/go-ipfs:v0.8.0
    ports:
      - 5001:5001 # ipfs api - expose if needed/wanted
#     - 4001:4001 # ipfs swarm - expose if needed/wanted
#     - 8080:8080 # ipfs gateway - expose if needed/wanted
    volumes:
      - ipfsf:/data/ipfs

  db_tzkt:
    container_name: tzkt-db
    restart: always
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: tzkt
      POSTGRES_PASSWORD: qwerty
      POSTGRES_DB: tzkt_db
      POSTGRES_PORT: 5431
    expose:
      - 5431
    ports:
      - 0.0.0.0:5431:5431

  db_dipdup:
    image: postgres:13
    restart: always
    ports:
      - 127.0.0.1:5433:5432
    container_name: db_dipdup
    environment:
      - POSTGRES_USER=dipdup
      - POSTGRES_DB=dipdup
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  hasura:
    image: hasura/graphql-engine:v2.0.1
    container_name: hasura
    ports:
      - 127.0.0.1:42000:8080
    depends_on:
      - db_dipdup
    restart: always
    environment:
      - HASURA_GRAPHQL_DATABASE_URL=postgres://dipdup:${POSTGRES_PASSWORD:-changeme}@db_dipdup:5432/dipdup
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - HASURA_GRAPHQL_DEV_MODE=false
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup, http-log, webhook-log, websocket-log, query-log
      - HASURA_GRAPHQL_ADMIN_SECRET=${ADMIN_SECRET:-changeme}
      - HASURA_GRAPHQL_UNAUTHORIZED_ROLE=user

  api_tzkt:
    container_name: tzkt-api
    restart: always
    image: bakingbad/tzkt-api:latest
    environment:
      TZKT_API_KESTREL__ENDPOINTS__HTTP__URL: http://0.0.0.0:5000
      TZKT_API_ConnectionStrings__DefaultConnection: host=db_tzkt;port=5432;database=tzkt_db;username=tzkt;password=qwerty;
    expose:
      - 5000
    ports:
      - 0.0.0.0:5000:5000
    depends_on:
      - sandbox

  sync_tzkt:
    container_name: tzkt-sync
    restart: always
    image: bakingbad/tzkt-sync:latest
    environment:
      TZKT_TezosNode__Endpoint: http://sandbox:20000
      TZKT_ConnectionStrings__DefaultConnection: host=db_tzkt;port=5432;database=tzkt_db;username=tzkt;password=qwerty;
    depends_on:
      - sandbox
      - db_tzkt

  indexer:
    build: ./dipdup
    container_name: indexer
    restart: "no"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - ADMIN_SECRET=${ADMIN_SECRET:-changeme}
    depends_on:
      - hasura
      - db_dipdup
      - api_tzkt
      - sync_tzkt

  provider:
    container_name: provider-node
    build: 
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend/:/backend/
    entrypoint: ./docker-start.sh
    env_file:
      - ./backend/.env
    ports:
      - 5678:5678
      - 8000:8000
    depends_on:
      - db
      - indexer

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend/:/opt/taia-x/frontend:cached
      - /opt/taia-x/frontend/node_modules
    container_name: taia-x-frontend
    environment:
      - CHOKIDAR_INTERVAL=1000
    ports:
      - 8080:8080
    depends_on:
      - ipfs
      - sandbox
      - indexer

volumes:
  postgres_data:
  ipfsf: