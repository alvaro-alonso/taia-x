parameter (or (pair %verifySig1 (bytes %message_packed) (pair (key %pbk) (signature %provider_sig))) (pair %verifySig2 (key %k) (pair (string %m) (signature %s))));
storage   (pair (int %counter) (pair (key %public_key) (string %raw_message)));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        # == verifySig1 ==
        # sp.verify(sp.check_signature(params.pbk, params.provider_sig, params.message_packed), 'FAILED') # @parameter%verifySig1 : @storage
        DUP;        # @parameter%verifySig1 : @parameter%verifySig1 : @storage
        CAR;        # bytes : @parameter%verifySig1 : @storage
        SWAP;       # @parameter%verifySig1 : bytes : @storage
        DUP;        # @parameter%verifySig1 : @parameter%verifySig1 : bytes : @storage
        GET 4;      # signature : @parameter%verifySig1 : bytes : @storage
        SWAP;       # @parameter%verifySig1 : signature : bytes : @storage
        GET 3;      # key : signature : bytes : @storage
        CHECK_SIGNATURE; # bool : @storage
        IF
          {}
          {
            PUSH string "FAILED"; # string : @storage
            FAILWITH;   # FAILED
          }; # @storage
        # self.data.counter += 1 # @storage
        DUP;        # @storage : @storage
        CAR;        # int : @storage
        PUSH int 1; # int : int : @storage
        ADD;        # int : @storage
        UPDATE 1;   # @storage
      }
      {
        # == verifySig2 ==
        # sp.verify(sp.check_signature(params.k, params.s, sp.pack(params.m))) # @parameter%verifySig2 : @storage
        DUP;        # @parameter%verifySig2 : @parameter%verifySig2 : @storage
        GET 3;      # string : @parameter%verifySig2 : @storage
        PACK;       # bytes : @parameter%verifySig2 : @storage
        SWAP;       # @parameter%verifySig2 : bytes : @storage
        DUP;        # @parameter%verifySig2 : @parameter%verifySig2 : bytes : @storage
        GET 4;      # signature : @parameter%verifySig2 : bytes : @storage
        SWAP;       # @parameter%verifySig2 : signature : bytes : @storage
        CAR;        # key : signature : bytes : @storage
        CHECK_SIGNATURE; # bool : @storage
        IF
          {}
          {
            PUSH string "WrongCondition: sp.check_signature(params.k, params.s, sp.pack(params.m))"; # string : @storage
            FAILWITH;   # FAILED
          }; # @storage
        # self.data.counter += 1 # @storage
        DUP;        # @storage : @storage
        CAR;        # int : @storage
        PUSH int 1; # int : int : @storage
        ADD;        # int : @storage
        UPDATE 1;   # @storage
      }; # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };